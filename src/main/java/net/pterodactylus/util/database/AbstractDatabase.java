/*
 * utils - AbstractDatabase.java - Copyright © 2006–2016 David Roden
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package net.pterodactylus.util.database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import net.pterodactylus.util.io.Closer;

/**
 * Abstract implementation of a {@link Database}. This already contains all the
 * heavy lifting, the only thing that is still left is the actual database
 * connection. This is done by overriding {@link #getConnection()} to return a
 * new connection to a database.
 *
 * @author <a href="mailto:bombe@pterodactylus.net">David ‘Bombe’ Roden</a>
 */
public abstract class AbstractDatabase implements Database {

	//
	// ACTIONS
	//

	/**
	 * @see net.pterodactylus.util.database.Database#getSingle(net.pterodactylus.util.database.Query,
	 *      net.pterodactylus.util.database.ObjectCreator)
	 */
	@Override
	public <T> T getSingle(Query query, ObjectCreator<T> objectCreator) throws DatabaseException {
		return new SingleDatabaseWorker<T>(query, objectCreator).work();
	}

	/**
	 * @see net.pterodactylus.util.database.Database#getMultiple(net.pterodactylus.util.database.Query,
	 *      net.pterodactylus.util.database.ObjectCreator)
	 */
	@Override
	public <T> List<T> getMultiple(Query query, ObjectCreator<T> objectCreator) throws DatabaseException {
		return new MultipleDatabaseWorker<T>(query, objectCreator).work();
	}

	/**
	 * @see net.pterodactylus.util.database.Database#insert(net.pterodactylus.util.database.Query)
	 */
	@Override
	public long insert(Query query) throws DatabaseException {
		return new InsertDatabaseWorker(query).work();
	}

	/**
	 * @see net.pterodactylus.util.database.Database#update(net.pterodactylus.util.database.Query)
	 */
	@Override
	public int update(Query query) throws DatabaseException {
		return new UpdateDatabaseWorker(query).work();
	}

	/**
	 * {@inheritDoc}
	 *
	 * @see net.pterodactylus.util.database.Database#process(Query, ResultProcessor)
	 */
	@Override
	public void process(Query query, ResultProcessor resultProcessor) throws DatabaseException {
		new ProcessWorker(query, resultProcessor).work();
	}

	//
	// STATIC METHODS
	//

	/**
	 * Creates a database from a {@link DataSource}.
	 *
	 * @param dataSource
	 *            The data source to create a database from
	 * @return The database that uses the given data source
	 */
	public static Database fromDataSource(final DataSource dataSource) {
		return new AbstractDatabase() {

			@Override
			protected void returnConnection(Connection connection) {
				Closer.close(connection);
			}

			@Override
			protected Connection getConnection() throws SQLException {
				return dataSource.getConnection();
			}
		};
	}

	//
	// ABSTRACT METHODS
	//

	/**
	 * Creates a new connection to the database.
	 *
	 * @return The created connection
	 * @throws SQLException
	 *             if a database error occurs
	 */
	protected abstract Connection getConnection() throws SQLException;

	/**
	 * Returns the connection after it has been used. This method can be used to
	 * simply close the connection, or to return it to a connection pool.
	 *
	 * @param connection
	 *            The connection to return
	 */
	protected abstract void returnConnection(Connection connection);

	/**
	 * Abstract base class for database workers. A database worker executes a
	 * query and returns a result that depends on the type of execute query.
	 * <p>
	 * This database worker contains several {@code run()} methods, each for
	 * different “stages” of a normal JDBC interaction: {@link #run(Connection)}
	 * is run with a {@link Connection} from
	 * {@link AbstractDatabase#getConnection()}, {@link #run(PreparedStatement)}
	 * with a {@link PreparedStatement} that was generated by
	 * {@link Query#createStatement(Connection)}, and {@link #run(ResultSet)}
	 * with a {@link ResultSet} that was obtained by
	 * {@link PreparedStatement#executeQuery()}. When a resource object was
	 * obtained by a not-overridden method of this class, the resource will be
	 * closed after the “deeper” {@code run()} method returns. Each method can
	 * be overridden if the default behaviour is not appropriate for the
	 * implementing database worker.
	 *
	 * @param <T>
	 *            The type of the result
	 * @author <a href="mailto:bombe@pterodactylus.net">David ‘Bombe’ Roden</a>
	 */
	private abstract class AbstractDatabaseWorker<T> {

		/** The query to execute. */
		protected final Query query;

		/**
		 * Creates a new abstract database worker that will execute the given
		 * query.
		 *
		 * @param query
		 *            The query to execute
		 */
		protected AbstractDatabaseWorker(Query query) {
			this.query = query;
		}

		/**
		 * Processes the given result set. The default implementation simply
		 * returns {@code null} here.
		 *
		 * @param resultSet
		 *            The result set to process
		 * @return The worker’s result
		 * @throws SQLException
		 *             if an SQL error occurs
		 */
		protected T run(ResultSet resultSet) throws SQLException {
			return null;
		}

		/**
		 * Processes the given prepared statement. The default implementation
		 * creates a {@link ResultSet} with
		 * {@link PreparedStatement#executeQuery()} and hands it over to
		 * {@link #run(ResultSet)}, closing it afterwards.
		 *
		 * @param preparedStatement
		 *            The prepared statement to process
		 * @return The worker’s result
		 * @throws SQLException
		 *             if an SQL error occurs
		 */
		protected T run(PreparedStatement preparedStatement) throws SQLException {
			ResultSet resultSet = null;
			try {
				resultSet = preparedStatement.executeQuery();
				return run(resultSet);
			} finally {
				Closer.close(resultSet);
			}
		}

		/**
		 * Processes the given connection. The default implementation uses the
		 * {@link #query} to {@link Query#createStatement(Connection) create a
		 * prepared statement} and hand it over to
		 * {@link #run(PreparedStatement)}, closing the statement afterwards.
		 *
		 * @param connection
		 *            The connection to interact with
		 * @return The worker’s result
		 * @throws SQLException
		 *             if an SQL error occurs
		 */
		protected T run(Connection connection) throws SQLException {
			PreparedStatement preparedStatement = null;
			try {
				preparedStatement = query.createStatement(connection);
				return run(preparedStatement);
			} finally {
				Closer.close(preparedStatement);
			}
		}

		/**
		 * Performs the work of this database worker. The default database
		 * worker retrieves a connection from
		 * {@link AbstractDatabase#getConnection()} and processes it with
		 * {@link #run(Connection)},
		 * {@link AbstractDatabase#returnConnection(Connection) returning} it
		 * afterwards.
		 *
		 * @return The result of the worker
		 * @throws DatabaseException
		 *             if a database error occurs
		 */
		public T work() throws DatabaseException {
			Connection connection = null;
			try {
				connection = getConnection();
				return run(connection);
			} catch (SQLException sqle1) {
				throw new DatabaseException(sqle1);
			} finally {
				returnConnection(connection);
			}
		}

	}

	/**
	 * A database worker that reads a single row from a result and creates an
	 * object from it.
	 *
	 * @param <T>
	 *            The type of the created object
	 * @author <a href="mailto:bombe@pterodactylus.net">David ‘Bombe’ Roden</a>
	 */
	private class SingleDatabaseWorker<T> extends AbstractDatabaseWorker<T> {

		/** The object creator. */
		private final ObjectCreator<T> objectCreator;

		/**
		 * Creates a new database worker that returns a single result.
		 *
		 * @param query
		 *            The query to execute
		 * @param objectCreator
		 *            The object creator
		 */
		public SingleDatabaseWorker(Query query, ObjectCreator<T> objectCreator) {
			super(query);
			this.objectCreator = objectCreator;
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		protected T run(ResultSet resultSet) throws SQLException {
			if (resultSet.next()) {
				return objectCreator.createObject(resultSet);
			}
			return null;
		}

	}

	/**
	 * Database worker that returns multiple results of a query.
	 *
	 * @param <T>
	 *            The type of the results
	 * @author <a href="mailto:bombe@pterodactylus.net">David ‘Bombe’ Roden</a>
	 */
	private class MultipleDatabaseWorker<T> extends AbstractDatabaseWorker<List<T>> {

		/** The object creator. */
		private final ObjectCreator<T> objectCreator;

		/**
		 * Creates a new database worker that returns multiple results.
		 *
		 * @param query
		 *            The query to execute
		 * @param objectCreator
		 *            The object creator
		 */
		public MultipleDatabaseWorker(Query query, ObjectCreator<T> objectCreator) {
			super(query);
			this.objectCreator = objectCreator;
		}

		/**
		 * {@inheritDoc}
		 */
		@Override
		protected List<T> run(ResultSet resultSet) throws SQLException {
			List<T> results = new ArrayList<T>();
			while (resultSet.next()) {
				T object = objectCreator.createObject(resultSet);
				results.add(object);
			}
			return results;
		}

	}

	/**
	 * A database worker that executes an insert and returns the automatically
	 * generated ID.
	 *
	 * @author <a href="mailto:bombe@pterodactylus.net">David ‘Bombe’ Roden</a>
	 */
	private class InsertDatabaseWorker extends AbstractDatabaseWorker<Long> {

		/**
		 * Creates a new database worker that performs an insert.
		 *
		 * @param query
		 *            The query to execute
		 */
		public InsertDatabaseWorker(Query query) {
			super(query);
		}

		/**
		 * @see net.pterodactylus.util.database.AbstractDatabase.AbstractDatabaseWorker#run(java.sql.Connection)
		 */
		@Override
		protected Long run(PreparedStatement preparedStatement) throws SQLException {
			preparedStatement.executeUpdate();
			ResultSet generatedKeys = null;
			try {
				generatedKeys = preparedStatement.getGeneratedKeys();
				if (generatedKeys.next()) {
					return generatedKeys.getLong(1);
				}
				return -1L;
			} finally {
				Closer.close(generatedKeys);
			}
		}

	}

	/**
	 * Database worker that performs an update and returns the number of updated
	 * or changed rows.
	 *
	 * @author <a href="mailto:bombe@pterodactylus.net">David ‘Bombe’ Roden</a>
	 */
	private class UpdateDatabaseWorker extends AbstractDatabaseWorker<Integer> {

		/**
		 * Creates a new database worker that performs an update.
		 *
		 * @param query
		 *            The query to execute
		 */
		public UpdateDatabaseWorker(Query query) {
			super(query);
		}

		/**
		 * @see net.pterodactylus.util.database.AbstractDatabase.AbstractDatabaseWorker#run(java.sql.PreparedStatement)
		 */
		@Override
		protected Integer run(PreparedStatement preparedStatement) throws SQLException {
			return preparedStatement.executeUpdate();
		}

	}

	/**
	 * A database worker that processes all result rows with an
	 * {@link ObjectCreator} instance which does not need to return meaningful
	 * values.
	 *
	 * @author <a href="mailto:david.roden@sysart.de">David Roden</a>
	 */
	private class ProcessWorker extends AbstractDatabaseWorker<Void> {

		/** The object creator used as result processor. */
		private final ResultProcessor resultProcessor;

		/**
		 * Creates a new process worker.
		 *
		 * @param query
		 *            The query to execute
		 * @param resultProcessor
		 *            The result processor
		 */
		public ProcessWorker(Query query, ResultProcessor resultProcessor) {
			super(query);
			this.resultProcessor = resultProcessor;
		}

		/**
		 * @see net.pterodactylus.util.database.AbstractDatabase.AbstractDatabaseWorker#run(java.sql.ResultSet)
		 */
		@Override
		protected Void run(ResultSet resultSet) throws SQLException {
			while (resultSet.next()) {
				resultProcessor.processResult(resultSet);
			}
			return null;
		}

	}

}
